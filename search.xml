<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>RSSAO</title>
    <url>/2020/07/23/RSSAO/</url>
    <content><![CDATA[<!-- build time:Thu Jul 23 2020 15:44:16 GMT+0800 (GMT+08:00) --><h1 id="Robust-SSAO"><a href="#Robust-SSAO" class="headerlink" title="Robust SSAO"></a>Robust SSAO</h1><p>介绍：实现了GPU-Zen中的一篇文章（Robust Screen Space Ambient Occlusion in 1 ms in 1080p on PS4）</p><p>实现方式：OpenGL+VS</p><p>github链接·：<a href="https://github.com/huaiozhang/RSSAO.git" target="_blank" rel="noopener">https://github.com/huaiozhang/RSSAO.git</a></p><h2 id="1-算法原理："><a href="#1-算法原理：" class="headerlink" title="1 算法原理："></a>1 算法原理：</h2><h3 id="1-1-AAO算法："><a href="#1-1-AAO算法：" class="headerlink" title="1.1 AAO算法："></a>1.1 AAO算法：</h3><p>&emsp;&emsp;该算法是基于 <a href="https://research.nvidia.com/publication/alchemy-screen-space-ambient-obscurance-algorithm" target="_blank" rel="noopener">Alcmy AO</a>算法，在AAO算法基础上加入了降低分辨率计算AO以及旋转采样的优化方法。</p><p>离散条件下，AAO算法的计算公式如下：</p><script type="math/tex;mode=display">\left.k_{A}=1-\frac{1}{s} \sum_{i=1}^{s} \frac{\max \left(0, \vec{v}_{i} \cdot \vec{n}+z_{c} \beta\right)}{\vec{v}_{i} \cdot \vec{v}_{i}+\varepsilon}\right), \vec{v}_{i}=p_{i}-p</script><p>其中，$k_A$代表环境光照的输入（减去环境遮挡）。$s$是采样数量（蒙特卡洛）,采样空间是屏幕可见区域对应的三维区域。$v_i$是中心点到采样点的向量。$\varepsilon$是防止分母为0，一般取0.0001。偏移距离$\beta$是根据阴影映射的思路消除自阴影的影响。</p><p>&emsp;&emsp;由于该算法的采样空间可见区域（如下图$\Gamma$所示），因此可以直接在屏幕空间采样，重投影到三维空间点计算AO。在保证算法质量前提下，加快了计算速度。</p><p><img src="https://gitee.com/huaiozhang/imagelib/raw/master/RSSAO_AO计算表示.jpg" style="zoom:67%"></p><p>&emsp;&emsp;上图展示了AAO计算场景的二维表示。公式（1）中定义的积分区域$\Gamma$如图所示，是采样半球与周围场景相交曲面对应立体角方向集合。区域$\Gamma$投影至屏幕空间后，是半径$r^{‘}$ 的圆。在屏幕空间的此圆内采样即可计算AO。</p><h3 id="1-2-RSSAO算法"><a href="#1-2-RSSAO算法" class="headerlink" title="1.2 RSSAO算法"></a>1.2 RSSAO算法</h3><p>&emsp;&emsp;在AAO基础上加入降低分辨率和优化采样方式即是RSSAO。</p><h3 id="降低分辨率"><a href="#降低分辨率" class="headerlink" title="降低分辨率"></a>降低分辨率</h3><p>&emsp;&emsp;在图像空间技术中，降低分辨率不仅可以加快计算速度，还可以保护图像边缘部分。RSSAO的降低分辨路计算如下图所示：</p><p><img src="https://gitee.com/huaiozhang/imagelib/raw/master/RSSAO_降低分辨率技术.jpg" style="zoom:67%"></p><p>&emsp;&emsp;其中， AO模糊采用高斯模糊。上采样使用基于空间和AO的双边滤波。下采样后的深度缓冲是将原始非线性缓冲转化后线性缓冲（视野空间下的z值，未投影）。优势是线性缓冲不需要32位精度，降低内存，转化公式如下：</p><script type="math/tex;mode=display">z_{\text {eye}}=\frac{-p r o[3][2]}{2 * \operatorname{depth}+p r o[2][2]-1.0}</script><h3 id="随机旋转采样"><a href="#随机旋转采样" class="headerlink" title="随机旋转采样"></a>随机旋转采样</h3><p>&emsp;采样一个二维的螺旋模型。该螺旋模式结构保证了旋转样本坐标一定角度后，所有样本会与旋转前的样本坐标基本不重合，随机性大大增加。这种特征保证了AO效果只需要极少的采样点就可以取得不错的光照效果。在该采样方式中，[0，s-1]范围内的s个采样点，第i个采样点的计算坐标$u_i$:</p><script type="math/tex;mode=display">u_{i}=\left(r_{i} \cos \theta_{i}, r_{i} \sin \theta_{i}\right), r_{i}=\frac{\sqrt{i+0.5}}{\sqrt{s}}, \theta_{i}=2.4 i+\varphi</script><p>其中，2.4为旋转黄金角度，$u_i$为旋转采样点角度。</p><p>为实现采样点坐标的半独立旋转，$u_i$ 值使用像素点的屏幕坐标计算，如下：</p><script type="math/tex;mode=display">\begin{array}{l}
\varphi=\operatorname{frac}\left(m_{z} \operatorname{frac}\left(w_{x y} \cdot m_{x y}\right)\right) \\
m=(0.06711056,0.0233486,52.9829189)
\end{array}</script><p>其中，frac函数是截取小数后的小数，$\varphi$为屏幕坐标，m为给定常量参数。</p><h2 id="2-算法流程"><a href="#2-算法流程" class="headerlink" title="2 算法流程"></a>2 算法流程</h2><p>算法流程如下：</p><p><img src="https://gitee.com/huaiozhang/imagelib/raw/master/RSSAO_渲染流程.JPG" style="zoom:50%"></p><h2 id="3-算法效果"><a href="#3-算法效果" class="headerlink" title="3 算法效果"></a>3 算法效果</h2><p>AAO算法，采样样本6，距离2如下：</p><p><img src="https://gitee.com/huaiozhang/imagelib/raw/master/AAO_采样3距离2.jpg" style="zoom:33%"></p><p>RSSAO算法，采样样本3，距离2如下：</p><p><img src="https://gitee.com/huaiozhang/imagelib/raw/master/RSSAO_采样3距离2.jpg" style="zoom:33%"></p><p>&emsp;&emsp;通过AAO和RRSSAO在采样数量为3，采样距离为2的对比下，RSSAO的AO图像在阴影影响范围、阴影细节、阴影的平滑以及真实度等方面明显优于AAO算法，已经获得明显的AO效果优势。尽管新算法使用双边滤波插值，AO图像仍然存在上图中如箭头所指的条纹噪声。但可以通过增加采样样本数量减少该噪声的影响，RSSAO算法，采样样本6，效果如下：</p><p><img src="https://gitee.com/huaiozhang/imagelib/raw/master/RSSAO_采样6距离2.jpg" style="zoom:33%"></p><!-- rebuild by neat -->]]></content>
      <categories>
        <category>我的项目</category>
      </categories>
      <tags>
        <tag>opengl</tag>
        <tag>ao</tag>
      </tags>
  </entry>
</search>
